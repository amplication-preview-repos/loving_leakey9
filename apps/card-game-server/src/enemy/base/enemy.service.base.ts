/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Enemy as PrismaEnemy } from "@prisma/client";

export class EnemyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.EnemyCountArgs, "select">): Promise<number> {
    return this.prisma.enemy.count(args);
  }

  async enemies(args: Prisma.EnemyFindManyArgs): Promise<PrismaEnemy[]> {
    return this.prisma.enemy.findMany(args);
  }
  async enemy(args: Prisma.EnemyFindUniqueArgs): Promise<PrismaEnemy | null> {
    return this.prisma.enemy.findUnique(args);
  }
  async createEnemy(args: Prisma.EnemyCreateArgs): Promise<PrismaEnemy> {
    return this.prisma.enemy.create(args);
  }
  async updateEnemy(args: Prisma.EnemyUpdateArgs): Promise<PrismaEnemy> {
    return this.prisma.enemy.update(args);
  }
  async deleteEnemy(args: Prisma.EnemyDeleteArgs): Promise<PrismaEnemy> {
    return this.prisma.enemy.delete(args);
  }
}
