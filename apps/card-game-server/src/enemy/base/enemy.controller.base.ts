/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EnemyService } from "../enemy.service";
import { EnemyCreateInput } from "./EnemyCreateInput";
import { Enemy } from "./Enemy";
import { EnemyFindManyArgs } from "./EnemyFindManyArgs";
import { EnemyWhereUniqueInput } from "./EnemyWhereUniqueInput";
import { EnemyUpdateInput } from "./EnemyUpdateInput";

export class EnemyControllerBase {
  constructor(protected readonly service: EnemyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Enemy })
  async createEnemy(@common.Body() data: EnemyCreateInput): Promise<Enemy> {
    return await this.service.createEnemy({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Enemy] })
  @ApiNestedQuery(EnemyFindManyArgs)
  async enemies(@common.Req() request: Request): Promise<Enemy[]> {
    const args = plainToClass(EnemyFindManyArgs, request.query);
    return this.service.enemies({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Enemy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async enemy(
    @common.Param() params: EnemyWhereUniqueInput
  ): Promise<Enemy | null> {
    const result = await this.service.enemy({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Enemy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEnemy(
    @common.Param() params: EnemyWhereUniqueInput,
    @common.Body() data: EnemyUpdateInput
  ): Promise<Enemy | null> {
    try {
      return await this.service.updateEnemy({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Enemy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEnemy(
    @common.Param() params: EnemyWhereUniqueInput
  ): Promise<Enemy | null> {
    try {
      return await this.service.deleteEnemy({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
